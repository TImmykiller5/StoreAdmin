// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


model Store {
  id String @id @default(uuid())
  name String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  billboards Billboard[] @relation("StoreToBillBoard")
  categories Category[] @relation("StoreToCategory")
  size Size[] @relation("StoreToSize")
  colors Color[] @relation("StoreToColor")
  product Product[] @relation("StoreToProduct")
  order Order[] @relation("StoreToOrder")
}

model Billboard {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillBoard", fields: [storeId], references: [id])
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  categories Category[] @relation("CategoryToBillBoard")
  @@index([storeId])
}

model Category{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references:[id])
  billboardId String
  billboard Billboard @relation("CategoryToBillBoard",fields: [billboardId], references: [id])
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[] @relation("CategoryToProduct")



  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize", fields: [storeId], references: [id])
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product[]

  @@index([storeId])
}

model Color {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor", fields: [storeId], references: [id])
  name String
  value String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product[] 


  @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name String
  price Decimal @db.Decimal(9,2)
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  size Size []
  color Color[]
  images Image[] @relation("ImagesToProduct")
  orderItem OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  // @@index([color])
  @@index([categoryId])
}

model Image{
  id String @id @default(uuid())
  productId String
  product Product @relation("ImagesToProduct", fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  }

model OrderItem{
  id String @id @default(uuid())
  orderId String 
  order Order @relation( fields: [orderId], references: [id])
  productId String
  product Product @relation( fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
